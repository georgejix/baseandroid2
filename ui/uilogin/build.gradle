def cfg = rootProject.ext
if (cfg.isDebug) {
    apply plugin: 'com.android.application'
    apply plugin: 'kotlin-kapt'
    apply plugin: 'org.jetbrains.kotlin.android'
} else {
    apply plugin: 'com.android.library'
    apply plugin: 'kotlin-kapt'
    apply plugin: 'org.jetbrains.kotlin.android'
}
android {
    namespace cfg.applicationId.uilogin
    compileSdk cfg.android.compileSdkVersion

    defaultConfig {
        if (cfg.isDebug) {
            applicationId cfg.applicationId.uilogin
        }
        minSdk cfg.android.minSdkVersion
        targetSdk cfg.android.targetSdkVersion
        versionCode cfg.android.versionCode
        versionName cfg.android.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
    }
    kapt {
        arguments {
            arg("AROUTER_MODULE_NAME", project.getName())
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    buildFeatures {
        compose true
        dataBinding true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.4.3'
    }
    packaging {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    sourceSets {
        main {
            if (cfg.isDebug) {
                manifest.srcFile 'src/main/debug/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
            }
        }
    }
}

dependencies {

    implementation project(":base:basemain")
    kapt cfg.libARouterCompiler

}